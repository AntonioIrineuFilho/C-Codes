Um programa em C acontece dentro de uma função main, que deve ser iniciada como um inteiro

int main() {
    *codigo*
    return 0;
}

Além disso, para possibilitar a entrada e saída de dados, é necessário importar a biblioteca <stdio.h>

#include <stdio.h>

// VARIÁVEIS E TIPOS DE DADOS //

Uma variável deve sempre ser declarada antes de ser utilizada, isso pode ser feito atribuindo um valor ou não, mas necessariamente atribuindo um tipo

Os principais tipos básicos são: int(inteiro), float(decimal com menor capacidade), double(decimal com maior capacidade),
char(caractere), char[](string)

Declaração:

int num;
int num = 0;

float num = 7.5;
double num = 7.5555;

char c = "A";
char[] = "Hello, World!"

Principais tipos derivados são: arrays(coleção de elementos do mesmo tipo), ponteiros(váriaveis que armazenam endereços de memória), 
struct(uma estrutura semelhantes a uma classe, mas que agrupa apenas variáveis de tipos diferentes)

int colecao[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

int x;
int *p = &x; // ponteiro para x

struct Pessoa {
    char nome[50];
    int idade;
    char sexo;
}

struct Pessoa pessoa1 = {"Antônio", 19, "M"};

// CONVERSÃO DE DADOS //

Conversão implícita -> Quando um dado passa de um tipo para outro sem risco de perda de dados, como um número inteiro sendo convertido para float

int a = 10;
float b = a; // "a" foi convertido para float sem risco de perda de informações

Conversão explícita -> Também chamado de type casting, ocorre quando a conversão pode ocasionar em perda de dados

int a = 31;
float b = (float) 31 / 2;

double x = 567.88873222489;
float y = (float) x; // saída = 567.888733

char w[] = "1234";
int z = (int)strtol(w, NULL, 10); // o valor após o NULL indica a base, se colocar 2 ele converte considerando que a string é um número binário
passando para decimal, se colocar 16, ele considera que a string é um hexadecimal passando para decimal e se colocar 10 ele considera que é um decimal

// OPERADORES LÓGICOS, RELACIONAIS E ARITMÉTICOS //

C possui uma gama de operadores aritméticos (+, -, *, /, %), relacionais (==, !=, <, >, <=, >=) e lógicos (&&, ||, !)

// ENTRADA E SAÍDA //

Saída -> printf("%tipo de dado", variavel);
Entrada -> scanf("%tipo de dado", &variavel);

%d -> int
%f -> float / double
%c -> char
%s -> char[] // string

Outra forma de leitura de entrada é utilizando as funções gets e fgets

gets -> lê uma linha inteira até o EOF ou \n, não é recomendado pois pode estourar o limite do arrays

fgets -> a mais recomendada, pois possui uma função sizeof(array) que controla o limite do array de forma segura

Para ler números é melhor utilizar o scanf, para strings, fgets!

// ESTRUTURAS DE CONTROLE CONDICIONAIS //

if else -> desvia o fluxo do código conforme condições

if (condição) {
    código
} else if (outra condição) {
    código
} else {
    código
}

switch case -> alternativa para o if else, utilizado para quando há muitas condições, para evitar excesso de "else if"

int n = 1;

switch (n) {
    case 1:
        printf("n é 1.");
        break; // necessário para cessar o fluxo
    case 2:
        printf("n é 3.");
        break;
    case 3:
        printf("n é 3.");
        break;
    default: // equivalente ao else, quando não houver caso 
        printf("n é menor que 1 ou maior que 3.")
        break;
}

// ESTRUTURAS DE CONTROLE DE REPETIÇÃO //

for -> repetição controlada, com quantidade especificada de iterações

no for declara-se uma variável de controle, define uma condição de parada e um incremento ou decremento para possibilitar as iterações

for (int i = 1; i <= 5; i++) {
    printf("%d", i);
}

while -> realiza iterações até uma condição de parada ser atendida sem um range limitado

while (condição de parada) {
    código
}

int cont = 1;

while (cont <= 5) {
    printf("%d", cont);
    cont++;
}

do while -> semelhante ao while, mas garante que o código vai ser executado pelo menos uma vez, uma vez que a condição é verificada no final do fluxo


do {
    código
} while (condição de parada)

int cont = 1;

do {
    printf("%d", cont);
    cont++;
} while (cont <= 5);

continue -> pula a iteração atual quando acionado

break -> encerra o laço no qual o break está presente(ou seja, se tiver laços aninhados, só vai encerrar o laço que ele estiver)

// ARRAYS 

arrays são coleções de elementos de um mesmo tipo

são declarados como variáveis comuns, porém com um limite de itens especificado

cada item é acessado por meio de um índice, que vai de 0 até tamanho-1

int arr[5];

int arr[5] = {1, 2, 3, 4, 5};

arr[0] -> 1

arr[4] -> 5

para atribuir valores ao array, basta acessar pelo índice e atribuir um valor para cada posição

int arr[10];

for (int i = 0; i < 10; i++) {
    arr[i] = i;
}

para printar cada elemento de um array, pode-se utilizar um laço para mostrar cada item individualmente

for (int i = 0; i < 10; i++) {
    printf("%d ", arr[i]);
}

matriz -> arrays multidimensionais, basicamente tabelas(linhas e colunas)

o primeiro tamanho refere-se ao número de linhas e o segundo, ao número de colunas

int matriz[5][5];

// adicionando valores

for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
        matriz[i][j] = i+1;
    }
}

OU 

matriz[5][5] = {
    {1, 1, 1, 1, 1},
    {2, 2, 2, 2, 2},
    {3, 3, 3, 3, 3},
    {4, 4, 4, 4, 4},
    {5, 5, 5, 5, 5}
};

// printando valores

for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
        printf("%d ", matriz[i][j]);
    }
    printf("\n");
}

// FUNÇÃO

uma função é um bloco de código reutilizável

em C, primeiro define-se o tipo de retorno da função(se ela não tiver retorno utiliza-se void) depois, o nome e os parâmetros(caso tenha)

int soma(int a, int b) {
    return a + b;
}

para chamar a função, basta usar o nome e passar os parâmetros caso necessariamente

soma(23, 37); // retorna o valor 60

os parâmetros na função são passados por valor ou refêrencia

por valor -> uma cópia do valor original é passada e retornada, mas o valor original se mantém

int soma20(a) {
    a = a + 20;
    return a;
}

int a = 10;

soma20(a); // retorna 30, mas o valor de a permanece 10

por referência -> o valor original é modificado por meio de um ponteiro para o endereço de memoria do valor original passado na função

int soma20(*a) {
    *a = *a + 20;
    return *a;
}

int a = 10;

soma20(&a); // valor original se torna 30

// RECURSÃO

uma função chamar ela mesma até alcançar uma condição de parada(caso base), onde todas as chamadas vão retornando para 
sua imediatamente anterior, até chegar na primeira chamada

// PONTEIROS

ponteiros são formas de manipular variáveis indiretamente, por meio dos endereços de memoria os quais as variáveis estão

declaração -> tipo *p = &variavel

para declarar um ponteiro coloca * e um nome, e na atribuição passa o endereço da memoria da variavel desejada

int a = 10;

int *ponteiro = &a; // o ponteiro aponta para o valor dentro do endereço de memoria, logo, se o ponteiro for modificado 
a variavel original também é, uma vez que o endereço é COMPARTILHADO

ponteiro para array -> localiza o elemento pelo indice e aponta para o endereço de memoria

para referenciar um ponteiro para cada elemento do array, utiliza-se ponteiro + indice

for (int i = 0; i < 10; i++) {
    printf("%d ", *(ponteiro + i));
}